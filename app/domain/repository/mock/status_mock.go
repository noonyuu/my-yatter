// Code generated by MockGen. DO NOT EDIT.
// Source: status.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	object "yatter-backend-go/app/domain/object"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStatus) Create(ctx context.Context, tx *sqlx.Tx, status *object.Status) (*object.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, status)
	ret0, _ := ret[0].(*object.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStatusMockRecorder) Create(ctx, tx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStatus)(nil).Create), ctx, tx, status)
}

// FindStatusByID mocks base method.
func (m *MockStatus) FindStatusByID(ctx context.Context, id int) (*object.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatusByID", ctx, id)
	ret0, _ := ret[0].(*object.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatusByID indicates an expected call of FindStatusByID.
func (mr *MockStatusMockRecorder) FindStatusByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatusByID", reflect.TypeOf((*MockStatus)(nil).FindStatusByID), ctx, id)
}

// GetPublicTimeline mocks base method.
func (m *MockStatus) GetPublicTimeline(ctx context.Context, maxID, sinceID, limit int) ([]*object.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicTimeline", ctx, maxID, sinceID, limit)
	ret0, _ := ret[0].([]*object.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicTimeline indicates an expected call of GetPublicTimeline.
func (mr *MockStatusMockRecorder) GetPublicTimeline(ctx, maxID, sinceID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicTimeline", reflect.TypeOf((*MockStatus)(nil).GetPublicTimeline), ctx, maxID, sinceID, limit)
}
